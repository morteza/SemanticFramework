Prefix(:=<http://onto.ir/ontologies/2014/1/semantic_http#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)


Ontology(<http://onto.ir/ontologies/2014/1/semantic_http>
Annotation(<http://purl.org/dc/terms/contributor> "Morteza Ansarinia"@en)
Annotation(<http://purl.org/dc/terms/title> "Http ontlogy for \"Semantic Framework\""@en)

Declaration(Class(:Cookie))
SubClassOf(:Cookie DataExactCardinality(1 :domain xsd:string))
SubClassOf(:Cookie DataExactCardinality(1 :isHttpOnly xsd:boolean))
SubClassOf(:Cookie DataExactCardinality(1 :isSecure xsd:boolean))
SubClassOf(:Cookie DataExactCardinality(1 :maxAge xsd:integer))
SubClassOf(:Cookie DataExactCardinality(1 :name xsd:string))
SubClassOf(:Cookie DataExactCardinality(1 :value xsd:string))
SubClassOf(:Cookie DataMaxCardinality(1 :path xsd:string))
Declaration(Class(:Header))
SubClassOf(:Header ObjectUnionOf(DataExactCardinality(1 :value xsd:string) DataSomeValuesFrom(:values xsd:string)))
SubClassOf(:Header DataExactCardinality(1 :name xsd:string))
Declaration(Class(:HttpError))
AnnotationAssertion(rdfs:comment :HttpError "Represents an http error, such as 4xx and 5xx http status codes."@en)
SubClassOf(:HttpError :StatusCode)
Declaration(Class(:HttpRedirect))
AnnotationAssertion(rdfs:comment :HttpRedirect "Represents an http error, such as 3xx http status codes."@en)
SubClassOf(:HttpRedirect :StatusCode)
Declaration(Class(:HttpSuccess))
AnnotationAssertion(rdfs:comment :HttpSuccess "Represents an http error, such as 2xx http status codes."@en)
SubClassOf(:HttpSuccess :StatusCode)
Declaration(Class(:Request))
SubClassOf(:Request DataExactCardinality(1 :date xsd:dateTime))
SubClassOf(:Request DataExactCardinality(1 :domain xsd:string))
SubClassOf(:Request DataExactCardinality(1 :encoding xsd:string))
SubClassOf(:Request DataExactCardinality(1 :format xsd:string))
SubClassOf(:Request DataExactCardinality(1 :host xsd:string))
SubClassOf(:Request DataExactCardinality(1 :isLoopback xsd:boolean))
SubClassOf(:Request DataExactCardinality(1 :isResolved xsd:boolean))
SubClassOf(:Request DataExactCardinality(1 :isSecure xsd:boolean))
SubClassOf(:Request DataExactCardinality(1 :method xsd:string))
SubClassOf(:Request DataExactCardinality(1 :path xsd:string))
SubClassOf(:Request DataExactCardinality(1 :port xsd:integer))
SubClassOf(:Request DataExactCardinality(1 :url xsd:string))
SubClassOf(:Request DataMaxCardinality(1 :password xsd:string))
SubClassOf(:Request DataMaxCardinality(1 :queryString xsd:string))
SubClassOf(:Request DataMaxCardinality(1 :remoteAddress xsd:string))
SubClassOf(:Request DataMaxCardinality(1 :user xsd:string))
Declaration(Class(:Response))
SubClassOf(:Response ObjectSomeValuesFrom(:hasCookie :Cookie))
SubClassOf(:Response ObjectSomeValuesFrom(:hasHeader :Header))
SubClassOf(:Response DataExactCardinality(1 :status xsd:string))
SubClassOf(:Response DataMaxCardinality(1 :contentType xsd:string))
SubClassOf(:Response DataMaxCardinality(1 :encoding xsd:string))
Declaration(Class(:StatusCode))
SubClassOf(:StatusCode DataExactCardinality(1 :value xsd:integer))
Declaration(ObjectProperty(:causes))
ObjectPropertyDomain(:causes :Request)
ObjectPropertyRange(:causes :Response)
Declaration(ObjectProperty(:hasCookie))
Declaration(ObjectProperty(:hasHeader))
Declaration(DataProperty(:contentType))
Declaration(DataProperty(:date))
Declaration(DataProperty(:domain))
Declaration(DataProperty(:encoding))
Declaration(DataProperty(:format))
Declaration(DataProperty(:host))
Declaration(DataProperty(:isHttpOnly))
Declaration(DataProperty(:isLoopback))
Declaration(DataProperty(:isResolved))
Declaration(DataProperty(:isSecure))
Declaration(DataProperty(:maxAge))
Declaration(DataProperty(:method))
Declaration(DataProperty(:name))
Declaration(DataProperty(:password))
Declaration(DataProperty(:path))
Declaration(DataProperty(:port))
Declaration(DataProperty(:queryString))
Declaration(DataProperty(:remoteAddress))
Declaration(DataProperty(:status))
Declaration(DataProperty(:url))
Declaration(DataProperty(:user))
Declaration(DataProperty(:value))
Declaration(DataProperty(:values))
Declaration(NamedIndividual(:HTTP_ACCEPTED))
ClassAssertion(:HttpSuccess :HTTP_ACCEPTED)
ClassAssertion(:StatusCode :HTTP_ACCEPTED)
DataPropertyAssertion(:value :HTTP_ACCEPTED "202"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_BAD_REQUEST))
ClassAssertion(:HttpError :HTTP_BAD_REQUEST)
ClassAssertion(:StatusCode :HTTP_BAD_REQUEST)
DataPropertyAssertion(:value :HTTP_BAD_REQUEST "400"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_CREATED))
ClassAssertion(:HttpSuccess :HTTP_CREATED)
ClassAssertion(:StatusCode :HTTP_CREATED)
DataPropertyAssertion(:value :HTTP_CREATED "201"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_FORBIDDEN))
ClassAssertion(:HttpError :HTTP_FORBIDDEN)
ClassAssertion(:StatusCode :HTTP_FORBIDDEN)
DataPropertyAssertion(:value :HTTP_FORBIDDEN "403"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_FOUND))
ClassAssertion(:HttpRedirect :HTTP_FOUND)
ClassAssertion(:StatusCode :HTTP_FOUND)
DataPropertyAssertion(:value :HTTP_FOUND "302"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_GATEWAY_TIMEOUT))
ClassAssertion(:HttpError :HTTP_GATEWAY_TIMEOUT)
ClassAssertion(:StatusCode :HTTP_GATEWAY_TIMEOUT)
DataPropertyAssertion(:value :HTTP_GATEWAY_TIMEOUT "503"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_INTERNAL_ERROR))
ClassAssertion(:HttpError :HTTP_INTERNAL_ERROR)
ClassAssertion(:StatusCode :HTTP_INTERNAL_ERROR)
DataPropertyAssertion(:value :HTTP_INTERNAL_ERROR "500"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_METHOD))
ClassAssertion(:HttpRedirect :HTTP_METHOD)
ClassAssertion(:StatusCode :HTTP_METHOD)
DataPropertyAssertion(:value :HTTP_METHOD "303"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_MOVED))
ClassAssertion(:HttpRedirect :HTTP_MOVED)
ClassAssertion(:StatusCode :HTTP_MOVED)
DataPropertyAssertion(:value :HTTP_MOVED "301"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_NOT_FOUND))
ClassAssertion(:HttpError :HTTP_NOT_FOUND)
ClassAssertion(:StatusCode :HTTP_NOT_FOUND)
DataPropertyAssertion(:value :HTTP_NOT_FOUND "404"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_NOT_IMPLEMENTED))
ClassAssertion(:HttpError :HTTP_NOT_IMPLEMENTED)
ClassAssertion(:StatusCode :HTTP_NOT_IMPLEMENTED)
DataPropertyAssertion(:value :HTTP_NOT_IMPLEMENTED "501"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_NOT_MODIFIED))
ClassAssertion(:HttpRedirect :HTTP_NOT_MODIFIED)
ClassAssertion(:StatusCode :HTTP_NOT_MODIFIED)
DataPropertyAssertion(:value :HTTP_NOT_MODIFIED "304"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_NO_RESPONSE))
ClassAssertion(:HttpSuccess :HTTP_NO_RESPONSE)
ClassAssertion(:StatusCode :HTTP_NO_RESPONSE)
DataPropertyAssertion(:value :HTTP_NO_RESPONSE "204"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_OK))
ClassAssertion(:HttpSuccess :HTTP_OK)
ClassAssertion(:StatusCode :HTTP_OK)
DataPropertyAssertion(:value :HTTP_OK "200"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_OVERLOADED))
ClassAssertion(:HttpError :HTTP_OVERLOADED)
ClassAssertion(:StatusCode :HTTP_OVERLOADED)
DataPropertyAssertion(:value :HTTP_OVERLOADED "502"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_PARTIAL_INFO))
ClassAssertion(:HttpSuccess :HTTP_PARTIAL_INFO)
ClassAssertion(:StatusCode :HTTP_PARTIAL_INFO)
DataPropertyAssertion(:value :HTTP_PARTIAL_INFO "203"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_PAYMENT_REQUIRED))
ClassAssertion(:HttpError :HTTP_PAYMENT_REQUIRED)
ClassAssertion(:StatusCode :HTTP_PAYMENT_REQUIRED)
DataPropertyAssertion(:value :HTTP_PAYMENT_REQUIRED "402"^^xsd:integer)
Declaration(NamedIndividual(:HTTP_UNAUTHORIZED))
ClassAssertion(:HttpError :HTTP_UNAUTHORIZED)
ClassAssertion(:StatusCode :HTTP_UNAUTHORIZED)
DataPropertyAssertion(:value :HTTP_UNAUTHORIZED "401"^^xsd:integer)
Declaration(NamedIndividual(:X_REQ))
ClassAssertion(:Request :X_REQ)
DLSafeRule(Body(DataPropertyAtom(:url Variable(<urn:swrl#x>) Variable(<urn:swrl#u>)) ClassAtom(:Request Variable(<urn:swrl#x>)))Head(DataPropertyAtom(:contentType Variable(<urn:swrl#x>) Variable(<urn:swrl#u>)) ClassAtom(:Response Variable(<urn:swrl#x>))))
DisjointClasses(:HttpError :HttpRedirect :HttpSuccess)
)
