Prefix(:=<http://onto.ir/ontologies/2014/1/semantic#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(http:=<http://onto.ir/ontologies/2014/1/semantic_http#>)
Prefix(java:=<http://onto.ir/ontologies/2014/1/semantic_java#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)


Ontology(<http://onto.ir/ontologies/2014/1/semantic>
Annotation(<http://purl.org/dc/terms/contributor> "Morteza Ansarinia"@en)
Annotation(<http://purl.org/dc/terms/title> "Semantic Framework Ontology"@en)
Annotation(owl:versionInfo "1.0.0")
Annotation(rdfs:seeAlso "http://github.com/ratnic/semantic")
Annotation(<http://purl.org/dc/terms/creator> "Morteza Ansarinia <ansarinia@me.com>")

Declaration(Class(:Action))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Action "Action")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Action "Actions")
SubClassOf(:Action ObjectSomeValuesFrom(:renders :Interface))
Declaration(Class(:Application))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Application "Applications")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Application "Application")
SubClassOf(:Application ObjectSomeValuesFrom(:hasAction :Action))
SubClassOf(:Application ObjectSomeValuesFrom(:hasConfiguration :Configuration))
SubClassOf(:Application ObjectSomeValuesFrom(:hasRouter :Router))
Declaration(Class(:BootstrapJob))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :BootstrapJob "BootstrapJob")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :BootstrapJob "BootstrapJobs")
SubClassOf(:BootstrapJob :Job)
Declaration(Class(:CRUD))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :CRUD "CRUDs")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :CRUD "CRUD")
SubClassOf(:CRUD :Action)
SubClassOf(:CRUD ObjectExactCardinality(1 :hasTarget :Model))
Declaration(Class(:Configuration))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Configuration "Configurations")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Configuration "Configuration")
SubClassOf(:Configuration :Field)
Declaration(Class(:CreateAction))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :CreateAction "CreateActions")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :CreateAction "CreateAction")
SubClassOf(:CreateAction :CRUD)
Declaration(Class(:ERBView))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :ERBView "ERBViews")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :ERBView "ERBView")
SubClassOf(:ERBView :Interface)
Declaration(Class(:Field))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Field "Fields")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Field "Field")
Declaration(Class(:FindAction))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :FindAction "FindActions")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :FindAction "FindAction")
SubClassOf(:FindAction :CRUD)
Declaration(Class(:HTMLView))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :HTMLView "HTMLViews")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :HTMLView "HTMLView")
SubClassOf(:HTMLView :Interface)
Declaration(Class(:Interface))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Interface "Interfaces")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Interface "Interface")
Declaration(Class(:JSONView))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :JSONView "JSONView")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :JSONView "JSONViews")
SubClassOf(:JSONView :Interface)
Declaration(Class(:JavaProcess))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :JavaProcess "JavaProcess")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :JavaProcess "JavaProcesses")
SubClassOf(:JavaProcess :Process)
SubClassOf(:JavaProcess DataExactCardinality(1 :hasJavaCode xsd:string))
Declaration(Class(:Job))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Job "Job")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Job "Jobs")
SubClassOf(:Job :Action)
Declaration(Class(:KeyValue))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :KeyValue "KeyValues")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :KeyValue "KeyValue")
SubClassOf(:KeyValue :Field)
SubClassOf(:KeyValue DataSomeValuesFrom(:hasKey xsd:string))
SubClassOf(:KeyValue DataSomeValuesFrom(:hasValue xsd:string))
SubClassOf(:KeyValue DataExactCardinality(1 :hasValueType xsd:string))
Declaration(Class(:Message))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Message "Messages")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Message "Message")
SubClassOf(:Message ObjectSomeValuesFrom(:hasField :Field))
Declaration(Class(:Model))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Model "Model")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Model "Models")
SubClassOf(:Model ObjectSomeValuesFrom(:hasField :Field))
Declaration(Class(:Process))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Process "Process")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Process "Processes")
SubClassOf(:Process :Action)
SubClassOf(:Process DataExactCardinality(1 :hasJavaCode xsd:string))
Declaration(Class(:RemoveAction))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :RemoveAction "RemoveActions")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :RemoveAction "RemoveAction")
SubClassOf(:RemoveAction :CRUD)
Declaration(Class(:Route))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Route "Route")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Route "Routes")
SubClassOf(:Route ObjectExactCardinality(1 :triggers :Action))
SubClassOf(:Route DataExactCardinality(1 :hasURLPattern xsd:string))
Declaration(Class(:Router))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Router "Routers")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Router "Router")
SubClassOf(:Router ObjectSomeValuesFrom(:hasRoute :Route))
Declaration(Class(:ScheduledJob))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :ScheduledJob "ScheduledJob")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :ScheduledJob "ScheduledJobs")
SubClassOf(:ScheduledJob :Job)
Declaration(Class(:Service))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :Service "Service")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :Service "Services")
SubClassOf(:Service :Interface)
Declaration(Class(:SimpleField))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :SimpleField "SimpleField")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :SimpleField "SimpleFields")
SubClassOf(:SimpleField :Field)
SubClassOf(:SimpleField DataExactCardinality(1 :hasValueType xsd:string))
Declaration(Class(:StaticRoute))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :StaticRoute "StaticRoute")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :StaticRoute "StaticRoutes")
SubClassOf(:StaticRoute :Route)
Declaration(Class(:UpdateAction))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :UpdateAction "UpdateActions")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :UpdateAction "UpdateAction")
SubClassOf(:UpdateAction :CRUD)
Declaration(Class(:XMLView))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> :XMLView "XMLViews")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> :XMLView "XMLView")
SubClassOf(:XMLView :Interface)
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> http:Request "Requests")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> http:Request "Request")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_sg> http:Result "Response")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#CN_pl> http:Result "Responses")
Declaration(ObjectProperty(:hasAction))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasAction "hasActioned")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasAction "hasAction")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasAction "hasActions")
Declaration(ObjectProperty(:hasConfiguration))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasConfiguration "hasConfigurationed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasConfiguration "hasConfiguration")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasConfiguration "hasConfigurations")
ObjectPropertyRange(:hasConfiguration :Configuration)
Declaration(ObjectProperty(:hasField))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasField "hasFields")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasField "hasField")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasField "hasFielded")
ObjectPropertyRange(:hasField :Field)
Declaration(ObjectProperty(:hasRoute))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasRoute "hasRoute")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasRoute "hasRoutes")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasRoute "hasRouted")
Declaration(ObjectProperty(:hasRouter))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasRouter "hasRoutered")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasRouter "hasRouters")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasRouter "hasRouter")
ObjectPropertyDomain(:hasRouter :Application)
ObjectPropertyRange(:hasRouter :Router)
Declaration(ObjectProperty(:hasTarget))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasTarget "hasTargets")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasTarget "hasTargeted")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasTarget "hasTarget")
Declaration(ObjectProperty(:hasType))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasType "hasTyped")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasType "hasTypes")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasType "hasType")
ObjectPropertyDomain(:hasType :Field)
Declaration(ObjectProperty(:renders))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :renders "rendersed")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :renders "renderses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :renders "renders")
ObjectPropertyDomain(:renders :Action)
ObjectPropertyRange(:renders :Interface)
Declaration(ObjectProperty(:triggeredBy))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :triggeredBy "triggeredBies")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :triggeredBy "triggeredBied")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :triggeredBy "triggeredBy")
InverseObjectProperties(:triggers :triggeredBy)
ObjectPropertyDomain(:triggeredBy :Action)
ObjectPropertyRange(:triggeredBy :Route)
Declaration(ObjectProperty(:triggers))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :triggers "triggers")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :triggers "triggerses")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :triggers "triggersed")
InverseObjectProperties(:triggers :triggeredBy)
FunctionalObjectProperty(:triggers)
ObjectPropertyDomain(:triggers :Route)
ObjectPropertyRange(:triggers :Action)
Declaration(DataProperty(:hasJavaCode))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasJavaCode "hasJavaCode")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasJavaCode "hasJavaCoded")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasJavaCode "hasJavaCodes")
DataPropertyRange(:hasJavaCode xsd:string)
Declaration(DataProperty(:hasKey))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasKey "hasKey")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasKey "hasKeys")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasKey "hasKeyed")
DataPropertyRange(:hasKey xsd:string)
Declaration(DataProperty(:hasURLPattern))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasURLPattern "hasURLPatterned")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasURLPattern "hasURLPattern")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasURLPattern "hasURLPatterns")
DataPropertyDomain(:hasURLPattern :Route)
DataPropertyRange(:hasURLPattern xsd:string)
Declaration(DataProperty(:hasValue))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasValue "hasValues")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasValue "hasValued")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasValue "hasValue")
Declaration(DataProperty(:hasValueType))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_vbg> :hasValueType "hasValueTyped")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_sg> :hasValueType "hasValueTypes")
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#TV_pl> :hasValueType "hasValueType")
DataPropertyRange(:hasValueType xsd:string)
Declaration(NamedIndividual(:tes))
AnnotationAssertion(<http://attempto.ifi.uzh.ch/ace_lexicon#PN_sg> :tes "tes")
ClassAssertion(http:Request :tes)
DisjointClasses(:ERBView :HTMLView :Service)
DLSafeRule(Body(ClassAtom(http:Request Variable(<urn:swrl#x>)))Head(ClassAtom(http:Result Variable(<urn:swrl#x>))))
DisjointClasses(:Configuration :KeyValue :SimpleField)
DisjointClasses(:CRUD :Job :Process)
DisjointClasses(:CreateAction :FindAction :RemoveAction :UpdateAction)
)
